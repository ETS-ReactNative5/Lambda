'use strict';
const canvas = document.getElementById ('canvas'),
  ctx = canvas.getContext ('2d');
ctx.Particle = function (a) {
  this.radius = 7;
  this.x = a.x;
  this.y = a.y;
  this.angle = a.angle;
  this.speed = a.speed;
  this.accel = a.accel;
  this.decay = 0.01;
  this.life = 1;
};
ctx.Particle.prototype.step = function (a) {
  this.speed += this.accel;
  this.x += Math.cos (this.angle) * this.speed;
  this.y += Math.sin (this.angle) * this.speed;
  this.angle += ctx.PI / 64;
  this.accel *= 1.01;
  this.life -= this.decay;
  0 >= this.life && ctx.particles.splice (a, 1);
};
ctx.Particle.prototype.draw = function (a) {
  ctx.ctx.fillStyle = ctx.ctx.strokeStyle =
    'hsla(' + (ctx.tick + 120 * this.life) + ', 100%, 60%, ' + this.life + ')';
  ctx.ctx.beginPath ();
  ctx.particles[a - 1] &&
    (ctx.ctx.moveTo (this.x, this.y), ctx.ctx.lineTo (
      ctx.particles[a - 1].x,
      ctx.particles[a - 1].y
    ));
  ctx.ctx.stroke ();
  ctx.ctx.beginPath ();
  ctx.ctx.arc (
    this.x,
    this.y,
    Math.max (0.001, this.life * this.radius),
    0,
    ctx.TWO_PI
  );
  ctx.ctx.fill ();
  a = 1.25 * Math.random ();
  ctx.ctx.fillRect (
    ~~(this.x + 35 * (Math.random () - 0.5) * this.life),
    ~~(this.y + 35 * (Math.random () - 0.5) * this.life),
    a,
    a
  );
};
ctx.step = function () {
  ctx.particles.push (
    new ctx.Particle ({
      x: ctx.width / 2 + Math.cos (ctx.tick / 20) * ctx.min / 2,
      y: ctx.height / 2 + Math.sin (ctx.tick / 20) * ctx.min / 2,
      angle: ctx.globalRotation + ctx.globalAngle,
      speed: 0,
      accel: 0.01,
    })
  );
  ctx.particles.forEach (function (a, b) {
    a.step (b);
  });
  ctx.globalRotation += ctx.PI / 6;
  ctx.globalAngle += ctx.PI / 6;
};
ctx.draw = function () {
  ctx.ctx.clearRect (0, 0, ctx.width, ctx.height);
  ctx.particles.forEach (function (a, b) {
    a.draw (b);
  });
};
ctx.init = function () {
  ctx.ctxas = document.createElement ('ctxas');
  ctx.ctx = ctx.ctxas.getContext ('2d');
  ctx.width = 300;
  ctx.height = 300;
  ctx.ctxas.width = ctx.width * window.devicePixelRatio;
  ctx.ctxas.height = ctx.height * window.devicePixelRatio;
  ctx.ctxas.style.width = ctx.width + 'px';
  ctx.ctxas.style.height = ctx.height + 'px';
  ctx.ctx.scale (window.devicePixelRatio, window.devicePixelRatio);
  ctx.min = 0.5 * ctx.width;
  ctx.particles = [];
  ctx.globalAngle = 0;
  ctx.globalRotation = 0;
  ctx.tick = 0;
  ctx.PI = Math.PI;
  ctx.TWO_PI = 2 * ctx.PI;
  ctx.ctx.globalCompositeOperation = 'lighter';
  document.body.appendChild (ctx.ctxas);
  ctx.loop ();
};
ctx.loop = function () {
  requestAnimationFrame (ctx.loop);
  ctx.step ();
  ctx.draw ();
  ctx.tick++;
};
ctx.init ();
